#pragma once

namespace NTC {
   /// таблица значений 10кОм характеристика R/T 2904 B25/100 4300K
   constexpr uint32_t resist_k2904[] {
      35563, 55, // от 0  -5.5 %/K
      27119, 53, // от 5  -5.3 %/K
      20860, 51, // от 10 -5.1 %/K
      16204, 50, // от 15 -5.0 %/K
      12683, 48, // от 20 -4.8 %/K
      10000, 47, // от 25 -4.7 %/K
       7942, 46, // от 30 -4.6 %/K
       6327, 45, // от 35 -4.5 %/K
       5074, 43, // от 40 -4.3 %/K
       4103, 42, // от 45 -4.2 %/K
       3336, 41, // от 50 -4.1 %/K
       2724, 40, // от 55 -4.0 %/K
       2237, 39, // от 60 -3.9 %/K
       1846, 38, // от 65 -3.8 %/K
       1531, 37, // от 70 -3.7 %/K
       1276, 36, // от 75 -3.6 %/K
       1068, 35, // от 80 -3.5 %/K
        899, 34, // от 85 -3.4 %/K
        761, 34, // от 90 -3.4 %/K
        645, 33  // от 95 -3.3 %/K
   };
   /// развёртывание таблицы до полного размера (градус на индекс от 0 до 99)
   template<size_t i, size_t j> struct Reisist2904 {
      static constexpr uint32_t resist = resist_k2904[2*i];
      static constexpr uint32_t k = resist_k2904[2*i+1];
      static constexpr uint32_t value = j == 0 ? resist : Reisist2904<i,j-1>::value*(1000-k)/1000;
   };
   template<size_t i> struct Reisist2904<i,0> {
      static constexpr uint32_t resist = resist_k2904[2*i];
      static constexpr uint32_t value = resist;
   };

   /// расчёт значений АЦП с дополнительныйм резистором 5кОм
   template<size_t i, size_t j> 
   constexpr uint32_t t2904() { return 4096 * Reisist2904<i,j>::value / (5000 + Reisist2904<i,j>::value); }

   /// таблица значений с АЦП, индекс - температура
   constexpr uint32_t u2904[] {
      t2904<0,0>(),  t2904<0,1>(),  t2904<0,2>(),  t2904<0,3>(),  t2904<0,4>(),
      t2904<1,0>(),  t2904<1,1>(),  t2904<1,2>(),  t2904<1,3>(),  t2904<1,4>(),
      t2904<2,0>(),  t2904<2,1>(),  t2904<2,2>(),  t2904<2,3>(),  t2904<2,4>(),
      t2904<3,0>(),  t2904<3,1>(),  t2904<3,2>(),  t2904<3,3>(),  t2904<3,4>(),
      t2904<4,0>(),  t2904<4,1>(),  t2904<4,2>(),  t2904<4,3>(),  t2904<4,4>(),
      t2904<5,0>(),  t2904<5,1>(),  t2904<5,2>(),  t2904<5,3>(),  t2904<5,4>(),
      t2904<6,0>(),  t2904<6,1>(),  t2904<6,2>(),  t2904<6,3>(),  t2904<6,4>(),
      t2904<7,0>(),  t2904<7,1>(),  t2904<7,2>(),  t2904<7,3>(),  t2904<7,4>(),
      t2904<8,0>(),  t2904<8,1>(),  t2904<8,2>(),  t2904<8,3>(),  t2904<8,4>(),
      t2904<9,0>(),  t2904<9,1>(),  t2904<9,2>(),  t2904<9,3>(),  t2904<9,4>(),
      t2904<10,0>(), t2904<10,1>(), t2904<10,2>(), t2904<10,3>(), t2904<10,4>(),
      t2904<11,0>(), t2904<11,1>(), t2904<11,2>(), t2904<11,3>(), t2904<11,4>(),
      t2904<12,0>(), t2904<12,1>(), t2904<12,2>(), t2904<12,3>(), t2904<12,4>(),
      t2904<13,0>(), t2904<13,1>(), t2904<13,2>(), t2904<13,3>(), t2904<13,4>(),
      t2904<14,0>(), t2904<14,1>(), t2904<14,2>(), t2904<14,3>(), t2904<14,4>(),
      t2904<15,0>(), t2904<15,1>(), t2904<15,2>(), t2904<15,3>(), t2904<15,4>(),
      t2904<16,0>(), t2904<16,1>(), t2904<16,2>(), t2904<16,3>(), t2904<16,4>(),
      t2904<17,0>(), t2904<17,1>(), t2904<17,2>(), t2904<17,3>(), t2904<17,4>(),
      t2904<18,0>(), t2904<18,1>(), t2904<18,2>(), t2904<18,3>(), t2904<18,4>(),
      t2904<19,0>(), t2904<19,1>(), t2904<19,2>(), t2904<19,3>(), t2904<19,4>()
   };
} // namespace NTC {
